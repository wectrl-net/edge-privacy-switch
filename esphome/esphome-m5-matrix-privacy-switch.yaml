esphome:
  name: m5-matrix
  friendly_name: m5-matrix

esp32:
  board: m5stack-atom
  framework:
    type: arduino

# Enable Home Assistant API
api:
  encryption:
    key: "7TcuGqAQhVfMnIjn3x0dXx6nI8m9psdbLTxONU/kBUo="

ota:
  - platform: esphome
    password: "35d1e5578d9f17ed19b35a3547fd6e60"

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  fast_connect: true
  domain: !secret net_domain

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # ap:
  #   ssid: "M5-Matrix Fallback Hotspot"
  #   password: "9Rxg4J1u5QTm"

captive_portal:

logger:
  baud_rate: 0  # Disable logging over UART

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200
  debug:
    # direction: BOTH
    # dummy_receiver: true
    after:
      delimiter: "\n"

sensor:
  - platform: wifi_signal
    id: wifi_value
    name: "WiFi Signal Sensor"

# number:
#   - platform: template
#     name: "LED brightness"
#     min_value: 0
#     max_value: 255
#     step: 1
#     lambda: |-
#       return id(led_matrix_display)->get_brightness();
#     set_action:
#       lambda: |-
#         id(led_matrix_display)->set_brightness(x);
globals:
  - id: display_enabled
    type: bool
    initial_value: "true"
    restore_value: yes

  - id: blink_enabled  # New global variable to control blinking
    type: bool
    initial_value: "false"
  
  - id: blink_counter  # Counter to handle the timing of blinking
    type: int
    initial_value: "0"

  - id: blink_max_cycles  # Set how many times to blink (3 blinks in this case)
    type: int
    initial_value: "6"  # 6 toggles = 3 blinks (on + off = 1 blink)

switch:
  - platform: template
    name: State Switch
    id: privacy_switch
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: false
    lambda: |-
      bool state = id(privacy_switch).state;  // Define inline variable
      if (state) {
        id(uart_bus).write_str("Privacy Switch: ON\n");  // Use the variable
      } else {
        id(uart_bus).write_str("Privacy Switch: OFF\n");
      }
      return state;  // Return the variable
    turn_on_action:
      - logger.log: "Privacy Switch: ON"
      - lambda: |-
          id(privacy_switch).publish_state(true);  // Manually report the state change
      - uart.write: "Privacy Switch: ON\n"  # Custom message to be written to UART
    turn_off_action:
      - logger.log: "Privacy Switch: OFF"
      - lambda: |-
          id(privacy_switch).publish_state(false);  // Manually report the state change
      - uart.write: "Privacy Switch: OFF\n"  # Custom message to be written to UART
  - platform: template
    name: "M5 Display"
    icon: "mdi:power"
    id: display_state_switch
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: false
    lambda: |-
      return id(display_enabled);
    turn_on_action:
      - lambda: |-
          id(display_enabled) = true;
          id(display_state_switch).publish_state(true);  // Manually report the state change
          id(led_matrix_display)->set_enabled(true);
    turn_off_action:
      - lambda: |-
          id(display_enabled) = false;
          id(display_state_switch).publish_state(false);  // Manually report the state change
          id(led_matrix_display)->set_enabled(false);

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: 27
    num_leds: 25
    rgb_order: GRB
    id: status_led
    color_correct: [50%, 50%, 50%]
    name: 'M5 Light'
    restore_mode: ALWAYS_OFF
    internal: true

event:
  - platform: template
    id: m5_button_event
    name: M5 Button
    device_class: button
    event_types:
      - single
      - double
      - triple
      - hold

binary_sensor:
  - platform: gpio
    pin:
      number: 39
      inverted: true
    name: 'M5 Button'
    id: m5_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - event.trigger:
              id: m5_button_event
              event_type: single
          - lambda: |-
              ESP_LOGI("button", "Single Click Detected");
          - switch.toggle: display_state_switch
      - timing:
          - ON for at least 1000ms
        then:
          - event.trigger:
              id: m5_button_event
              event_type: hold
          - lambda: |-
              ESP_LOGI("button", "Button Hold Detected");
          - switch.toggle: privacy_switch
      - timing:
          - ON for at most 350ms
          - OFF for at most 300ms
          - ON for at most 350ms
        then:
          - event.trigger:
              id: m5_button_event
              event_type: double
          - lambda: |-
              ESP_LOGI("button", "Double Click Detected");

      - timing:
          - ON for at most 350ms
          - OFF for at most 300ms
          - ON for at most 350ms
          - OFF for at most 300ms
          - ON for at most 350ms
        then:
          - event.trigger:
              id: m5_button_event
              event_type: triple
          - lambda: |-
              ESP_LOGI("button", "Triple Click Detected");

              id(blink_enabled) = true;  // Enable blinking
              id(blink_counter) = 0;  // Reset blink counter
          - uart.write: "Trigger Host Reboot\n"  # Reboot message to be written to UART

font:
  - id: tinyfont
    file: "fonts/DejaVuSans.ttf"
    size: 7
    glyphs: '♡Ωäöüß!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'

display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: status_led
    width: 5
    height: 5
    rotation: 180°
    update_interval: 400ms
    lambda: |-
      if (id(display_enabled)) {
        if (id(blink_enabled)) {
          id(blink_counter) += 1;
          
          // Check if blink_counter exceeds the set max cycles
          if (id(blink_counter) <= id(blink_max_cycles)) {
            if (id(blink_counter) % 2 == 0) {
              it.fill(Color(0x000000));  // Screen off during blink
            } else {
              // Display the regular content during blink
              static uint16_t xpos = 0;
              int x_start, y_start;
              int width, height;

              if (id(privacy_switch).state) {
                it.get_text_bounds(0, 0, "ON", id(tinyfont), 
                    TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height); 
                it.fill(Color(0x00FF00));  // Green background for ON
                it.print(-(xpos % (width + 4)), -2, id(tinyfont), Color(0xFFFFFF), "ON");
              } else {
                it.get_text_bounds(0, 0, "OFF", id(tinyfont), 
                    TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height);
                it.fill(Color(0xFF0000));  // Red background for OFF
                it.print(-(xpos % (width + 4)), -2, id(tinyfont), Color(0xFFFFFF), "OFF");
              }

              if (width > it.get_width()) xpos++;
              else xpos = 0;
            }
          } else {
            id(blink_enabled) = false;  // Disable blinking after max cycles
            id(blink_counter) = 0;  // Reset counter
          }
        } else {
          // Regular display content when not blinking
          static uint16_t xpos = 0;
          int x_start, y_start;
          int width, height;

          if (id(privacy_switch).state) {
            it.get_text_bounds(0, 0, "ON", id(tinyfont), 
                TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height); 
            it.fill(Color(0x00FF00));  // Green background for ON
            it.print(-(xpos % (width + 4)), -2, id(tinyfont), Color(0xFFFFFF), "ON");
          } else {
            it.get_text_bounds(0, 0, "OFF", id(tinyfont), 
                TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height);
            it.fill(Color(0xFF0000));  // Red background for OFF
            it.print(-(xpos % (width + 4)), -2, id(tinyfont), Color(0xFFFFFF), "OFF");
          }

          if (width > it.get_width()) xpos++;
          else xpos = 0;
        }
      }   